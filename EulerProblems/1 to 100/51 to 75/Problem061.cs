using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

/*
    Euler Problem 61

    Keith Fletcher
    Jul 2017

    This file is Unlicensed.
    See the foot of the file, or refer to <http://unlicense.org>
*/

namespace HisRoyalRedness.com
{
    [Solution("28684")]
    public class Problem61 : ProblemBase
    {
        /// <summary>
        /// http://projecteuler.net/index.php?section=problems&id=61
        /// 
        /// Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers 
        /// are all figurate(polygonal) numbers and are generated by the following formulae:
        /// 
        ///     Triangle    P3,     n = n(n + 1) / 2 	  	1, 3, 6, 10, 15, ...
        ///     Square      P4,     n = n2 	  	            1, 4, 9, 16, 25, ...
        ///     Pentagonal  P5,     n = n(3n−1) / 2 	  	1, 5, 12, 22, 35, ...
        ///     Hexagonal   P6,     n = n(2n−1) 	  	    1, 6, 15, 28, 45, ...
        ///     Heptagonal  P7,     n = n(5n−3) / 2 	  	1, 7, 18, 34, 55, ...
        ///     Octagonal   P8,     n = n(3n−2) 	  	    1, 8, 21, 40, 65, ...
        ///     
        /// The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting 
        /// properties.
        /// 
        /// The set is cyclic, in that the last two digits of each number is the first two 
        /// digits of the next number(including the last number with the first).
        /// 
        /// Each polygonal type: triangle(P3,127=8128), square(P4,91=8281), and 
        /// pentagonal(P5,44=2882), is represented by a different number in the set.
        /// 
        /// This is the only set of 4-digit numbers with this property.
        /// 
        /// Find the sum of the only ordered set of six cyclic 4-digit numbers for which each 
        /// polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, 
        /// is represented by a different number in the set.
        /// 
        /// Answer: 28684
        /// </summary>

        protected override string InternalSolve()
        {
            var figuratives = new[]
            {
                new FigurativeGrouping(TriangleNumber.Sequence()),
                new FigurativeGrouping(SquareNumber.Sequence()),
                new FigurativeGrouping(PentagonalNumber.Sequence()),
                new FigurativeGrouping(HexagonalNumber.Sequence()),
                new FigurativeGrouping(HeptagonalNumber.Sequence()),
                new FigurativeGrouping(OctagonalNumber.Sequence()),
            };


            return GetFigurativeIndices
                .SelectMany(index => figuratives[index[0]]
                    .SequenceSplit
                    .SelectMany(s1 => GetChain(s1, figuratives[index[1]])
                        .SelectMany(s2 => GetChain(s2, figuratives[index[2]])
                            .SelectMany(s3 => GetChain(s3, figuratives[index[3]])
                                .SelectMany(s4 => GetChain(s4, figuratives[index[4]])
                                    .SelectMany(s5 => GetChain(s5, figuratives[index[5]])
                                        .Where(s6 => s6[1] == s1[0])
                                        .Select(s6 => (new [] { s1, s2, s3, s4, s5, s6 }) // Chain of sequences
                                        .Select(s => ulong.Parse(s[0] + s[1]))))))))) // Convert each sequence back into a ulong
                .Select(fl => fl.Sum()) // Get the sum of the chain
                .Min()
                .ToString();
        }

        IEnumerable<string[]> GetChain(string[] item, FigurativeGrouping nextGrouping) => nextGrouping.LookStart[item[1]];

        IEnumerable<int[]> GetFigurativeIndices
        {
            get
            {
                var i1 = 0;
                for (var i2 = 0; i2 < 6; ++i2)
                {
                    if (i2 == i1)
                        continue;
                    for (var i3 = 0; i3 < 6; ++i3)
                    {
                        if (i3 == i1 || i3 == i2)
                            continue;
                        for (var i4 = 0; i4 < 6; ++i4)
                        {
                            if (i4 == i1 || i4 == i2 || i4 == i3)
                                continue;
                            for (var i5 = 0; i5 < 6; ++i5)
                            {
                                if (i5 == i1 || i5 == i2 || i5 == i3 || i5 == i4)
                                    continue;
                                for (var i6 = 0; i6 < 6; ++i6)
                                {
                                    if (i6 == i1 || i6 == i2 || i6 == i3 || i6 == i4 || i6 == i5)
                                        continue;
                                    yield return new[] { i1, i2, i3, i4, i5, i6 };
                                }
                            }
                        }
                    }
                }
            }
        }

        internal class FigurativeLoop
        {
            public FigurativeLoop(params string[][] items)
            {
                _sequence = items.Select(i => ulong.Parse(i[0] + i[1])).ToArray();
            }

            public ulong[] Sequence => _sequence;

            readonly ulong[] _sequence;
        }

        internal class FigurativeGrouping
        {
            public FigurativeGrouping(IEnumerable<ulong> sequence)
            {
                _sequence = sequence
                    .SkipWhile(n => n < 1000)
                    .TakeWhile(n => n < 10000)
                    .ToArray();

                _sequenceSplit = _sequence
                    .Select(n => n.ToString("0000"))
                    .Select(n => new string[] { n.Substring(0, 2), n.Substring(2, 2) })
                    .ToArray();


                _lookS = _sequenceSplit.ToLookup(s => s[0], s => s);
                _lookE = _sequenceSplit.ToLookup(s => s[1], s => s);
            }

            public ulong[] Sequence => _sequence;
            public string[][] SequenceSplit => _sequenceSplit;
            public ILookup<string, string[]> LookStart => _lookS;
            public ILookup<string, string[]> LookEnd => _lookE;

            readonly ulong[] _sequence;
            readonly string[][] _sequenceSplit;
            readonly ILookup<string, string[]> _lookS;
            readonly ILookup<string, string[]> _lookE;
        }
    }


}

/*
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org>
*/
