using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

/*
    Common calculators. 

    ** Generated by Calculator_Template.tt **

    Keith Fletcher
    Jul 2017

    This file is Unlicensed.
    See the foot of the file, or refer to <http://unlicense.org>
*/


namespace HisRoyalRedness.com
{
    public static partial class Calculators
    {
        #region Odd and Even
        public static bool IsOdd(this ulong number) => (number & 1) == 1; 
        public static bool IsOdd(this long number) => (number & 1) == 1; 
        public static bool IsOdd(this uint number) => (number & 1) == 1; 
        public static bool IsOdd(this int number) => (number & 1) == 1; 
        public static bool IsOdd(this BigInteger number) => (number & 1) == 1; 
    

        public static bool IsEven(this ulong number) => (number & 1) == 0; 
        public static bool IsEven(this long number) => (number & 1) == 0; 
        public static bool IsEven(this uint number) => (number & 1) == 0; 
        public static bool IsEven(this int number) => (number & 1) == 0; 
        public static bool IsEven(this BigInteger number) => (number & 1) == 0; 
        #endregion Odd and Even

        public static ulong Reverse(this ulong number) => ulong.Parse(number.ToString().Reverse()); 
        public static long Reverse(this long number) => long.Parse(number.ToString().Reverse()); 
        public static uint Reverse(this uint number) => uint.Parse(number.ToString().Reverse()); 
        public static int Reverse(this int number) => int.Parse(number.ToString().Reverse()); 
        public static BigInteger Reverse(this BigInteger number) => BigInteger.Parse(number.ToString().Reverse()); 

        #region Palindrome
        public static bool IsPalindrome(this ulong number) => IsPalindrome(number.ToString());
        public static bool IsPalindrome(this long number) => IsPalindrome(number.ToString());
        public static bool IsPalindrome(this uint number) => IsPalindrome(number.ToString());
        public static bool IsPalindrome(this int number) => IsPalindrome(number.ToString());
        public static bool IsPalindrome(this BigInteger number) => IsPalindrome(number.ToString());
        #endregion Palindrome

        #region Lychrel
        const int MAX_LYCHREL_ITERATIONS = 50;

        public static bool IsLychrel(this ulong number, int maxIterations = MAX_LYCHREL_ITERATIONS)
        {
            var sum = number;
            for(var i = 0; i < maxIterations; ++i)
            {
                sum += sum.Reverse();
                if (sum.IsPalindrome())
                    return false;
            }
            return true;
        }

        public static bool IsLychrel(this long number, int maxIterations = MAX_LYCHREL_ITERATIONS)
        {
            var sum = number;
            for(var i = 0; i < maxIterations; ++i)
            {
                sum += sum.Reverse();
                if (sum.IsPalindrome())
                    return false;
            }
            return true;
        }

        public static bool IsLychrel(this uint number, int maxIterations = MAX_LYCHREL_ITERATIONS)
        {
            var sum = number;
            for(var i = 0; i < maxIterations; ++i)
            {
                sum += sum.Reverse();
                if (sum.IsPalindrome())
                    return false;
            }
            return true;
        }

        public static bool IsLychrel(this int number, int maxIterations = MAX_LYCHREL_ITERATIONS)
        {
            var sum = number;
            for(var i = 0; i < maxIterations; ++i)
            {
                sum += sum.Reverse();
                if (sum.IsPalindrome())
                    return false;
            }
            return true;
        }

        public static bool IsLychrel(this BigInteger number, int maxIterations = MAX_LYCHREL_ITERATIONS)
        {
            var sum = number;
            for(var i = 0; i < maxIterations; ++i)
            {
                sum += sum.Reverse();
                if (sum.IsPalindrome())
                    return false;
            }
            return true;
        }

        
        #endregion Lychrel

        #region GCD and LCM
        static ulong[] ToUlongArray(IEnumerable<long> arr) => arr.Select(u => (ulong)u).ToArray();
        static ulong[] ToUlongArray(IEnumerable<uint> arr) => arr.Select(u => (ulong)u).ToArray();
        static ulong[] ToUlongArray(IEnumerable<int> arr) => arr.Select(u => (ulong)u).ToArray();
        static ulong[] ToUlongArray(IEnumerable<BigInteger> arr) => arr.Select(u => (ulong)u).ToArray();

        public static long LCM(params long[] series) => (long)LCM(ToUlongArray(series));
        public static uint LCM(params uint[] series) => (uint)LCM(ToUlongArray(series));
        public static int LCM(params int[] series) => (int)LCM(ToUlongArray(series));
        public static BigInteger LCM(params BigInteger[] series) => (BigInteger)LCM(ToUlongArray(series));
        

        public static long LCM(this IEnumerable<long> series) => (long)LCM(ToUlongArray(series));
        public static uint LCM(this IEnumerable<uint> series) => (uint)LCM(ToUlongArray(series));
        public static int LCM(this IEnumerable<int> series) => (int)LCM(ToUlongArray(series));
        public static BigInteger LCM(this IEnumerable<BigInteger> series) => (BigInteger)LCM(ToUlongArray(series));
      

        public static long GCD(params long[] series) => (long)GCD(ToUlongArray(series));
        public static uint GCD(params uint[] series) => (uint)GCD(ToUlongArray(series));
        public static int GCD(params int[] series) => (int)GCD(ToUlongArray(series));
        public static BigInteger GCD(params BigInteger[] series) => (BigInteger)GCD(ToUlongArray(series));
        

        public static long GCD(this IEnumerable<long> series) => (long)GCD(ToUlongArray(series));
        public static uint GCD(this IEnumerable<uint> series) => (uint)GCD(ToUlongArray(series));
        public static int GCD(this IEnumerable<int> series) => (int)GCD(ToUlongArray(series));
        public static BigInteger GCD(this IEnumerable<BigInteger> series) => (BigInteger)GCD(ToUlongArray(series));
        #endregion GCD and LCM
    }
}

/*
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org>
*/