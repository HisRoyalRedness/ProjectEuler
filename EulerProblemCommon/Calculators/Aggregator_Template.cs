using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

/*
    Common aggregators. 

    ** Generated by Aggregator_Template.tt **

    Keith Fletcher
    Jul 2017

    This file is Unlicensed.
    See the foot of the file, or refer to <http://unlicense.org>
*/


namespace HisRoyalRedness.com
{
    public static partial class Aggregators
    {
        #region Sum
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static ulong Sum(this IEnumerable<ulong> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            ulong sum = 0;
            foreach (var num in sequence)
                sum += num;
            return sum;
        }
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static long Sum(this IEnumerable<long> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            long sum = 0;
            foreach (var num in sequence)
                sum += num;
            return sum;
        }
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static uint Sum(this IEnumerable<uint> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            uint sum = 0;
            foreach (var num in sequence)
                sum += num;
            return sum;
        }
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static int Sum(this IEnumerable<int> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            int sum = 0;
            foreach (var num in sequence)
                sum += num;
            return sum;
        }
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static BigInteger Sum(this IEnumerable<BigInteger> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            BigInteger sum = 0;
            foreach (var num in sequence)
                sum += num;
            return sum;
        }
        #endregion Sum

        #region Product
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static ulong Product(this IEnumerable<ulong> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            ulong product = 1;
            foreach (var num in sequence)
                product *= num;
            return product;
        }
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static long Product(this IEnumerable<long> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            long product = 1;
            foreach (var num in sequence)
                product *= num;
            return product;
        }
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static uint Product(this IEnumerable<uint> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            uint product = 1;
            foreach (var num in sequence)
                product *= num;
            return product;
        }
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static int Product(this IEnumerable<int> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            int product = 1;
            foreach (var num in sequence)
                product *= num;
            return product;
        }
        /// <summary>
        /// Calculate the sum of all the elements in the sequence
        /// </summary>
        public static BigInteger Product(this IEnumerable<BigInteger> sequence)
        {
            if (sequence == null)
                throw new ArgumentNullException(nameof(sequence));
            BigInteger product = 1;
            foreach (var num in sequence)
                product *= num;
            return product;
        }
        #endregion Product
    }
}

/*
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org>
*/